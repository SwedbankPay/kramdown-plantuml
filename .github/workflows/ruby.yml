name: Ruby Gem

on:
  push:
    branches: ['*']
    tags: ['*']
  pull_request:

jobs:
  version:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.variables.outputs.version }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.4
      if: startsWith(github.ref, 'refs/tags/') != true # Only use GitVersion for unstable builds
      with:
        versionSpec: '5.3.x'

    - name: Execute GitVersion
      id: gitversion
      if: startsWith(github.ref, 'refs/tags/') != true
      uses: gittools/actions/gitversion/execute@v0.9.4

    - name: Create variables
      id: variables
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: ./.github/scripts/variables.sh ${{ steps.gitversion.outputs.legacySemVerPadded }}

  plantuml:
    needs: version
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 14

    - name: Cache Maven dependencies
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Version stamp
      run: mvn versions:set -DnewVersion=${{ needs.version.outputs.version }}

    - name: Maven install
      run: mvn install

    - name: Upload plantuml.jar artifact
      uses: actions/upload-artifact@v2
      with:
        name: plantuml.jar
        path: ~/.m2/repository/**/plantuml*.jar

  gem:
    needs: [version, plantuml]
    runs-on: ubuntu-latest

    outputs:
      name: ${{ steps.gem.outputs.name }}

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: plantuml.jar
        path: bin/

    - name: Version stamp
      run: sed -i -e 's/0.0.1.dev/${{ needs.version.outputs.version }}/g' ${{ github.workspace }}/lib/kramdown-plantuml/version.rb

    - name: Set up Ruby 2.7
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.7.x

    - name: Setup Graphviz
      uses: kamiazya/setup-graphviz@v1

    - name: Cache Ruby gems
      uses: actions/cache@v1
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: ${{ runner.os }}-gems-

    - name: Bundle install
      run: .github/scripts/bundle-install.sh

    - name: rubocop
      run: bundle exec rubocop --fail-level warning --display-only-fail-level-offenses

    - name: Test with Rake
      run: bundle exec rake

    - name: Codecov upload
      run: bundle exec rake codecov:upload || echo 'Codecov upload failed'

    - name: Build gem
      id: gem
      run: .github/scripts/build-gem.sh

    - name: Upload artifact
      uses: actions/upload-artifact@v2-preview
      with:
        name: ${{ steps.gem.outputs.name }}
        path: ${{ steps.gem.outputs.name }}

    - name: Test gem
      run: .github/scripts/test-gem.sh --workdir "${{ github.workspace }}/spec/fixture" --gemdir "${{ github.workspace }}" --verbose

  publish-dev:
    needs: [version, gem]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: ${{ needs.gem.outputs.name }}

    - name: Set up Ruby 2.7
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.7.x

    - name: Publish to GPR
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OWNER: SwedbankPay
      run: |
        mkdir -p $HOME/.gem
        touch $HOME/.gem/credentials
        chmod 0600 $HOME/.gem/credentials
        printf -- "---\n:github: Bearer ${GITHUB_TOKEN}\n" > $HOME/.gem/credentials
        set -e
        gem push --KEY github \
                 --host https://rubygems.pkg.github.com/${OWNER} \
                 ${{ needs.gem.outputs.name }} \
          || echo "push failed ($?) probably due to version '${{ needs.version.outputs.version }}' already existing in GPR."

    - name: Test gem
      run: .github/scripts/test-gem.sh --workdir "${{ github.workspace }}/spec/fixture" --token "${{ secrets.GITHUB_TOKEN }}" --verbose

  publish-prod:
    needs: [version, gem]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') # Only publish tagged commits

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: ${{ needs.gem.outputs.name }}

    - name: Publish to RubyGems
      env:
        RUBYGEMS_API_KEY: ${{ secrets.RUBYGEMS_API_KEY }}
      run: |
        mkdir -p $HOME/.gem
        touch $HOME/.gem/credentials
        chmod 0600 $HOME/.gem/credentials
        printf -- "---\n:rubygems_api_key: ${RUBYGEMS_API_KEY}\n" > $HOME/.gem/credentials
        gem push ${{ needs.gem.outputs.name }}
